name: CI‑CD

# 1) auto‑apply on push to main
# 2) manual dispatch with choice of apply or destroy
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: "apply or destroy infra"
        required: true
        default: apply
        type: choice
        options:
          - apply
          - destroy

env:
  RG_NAME:          adogithubtf-rg
  LOCATION:         uksouth
  ACR_SUFFIX:       adogithubtf
  IMAGE_NAME:       ado-github-terraform-demo
  ACR_LOGIN_SERVER: acradogithubtf.azurecr.io

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ── Bootstrap remote‑state backend (only on apply) ────────────────
      - name: Ensure TF state backend exists
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: |
          az group create --name ${{ env.RG_NAME }} --location ${{ env.LOCATION }}
          az storage account create \
            --name tfstate${{ env.ACR_SUFFIX }} \
            --resource-group ${{ env.RG_NAME }} \
            --sku Standard_LRS \
            --kind StorageV2 \
            --https-only true
          az storage container create \
            --name state \
            --account-name tfstate${{ env.ACR_SUFFIX }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false -lock-timeout=5m

      - name: Terraform Apply
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        working-directory: ./terraform
        run: terraform apply -auto-approve \
               -var "rg_name=${{ env.RG_NAME }}" \
               -var "location=${{ env.LOCATION }}" \
               -var "acr_suffix=${{ env.ACR_SUFFIX }}" \
               -var "image_name=${{ env.IMAGE_NAME }}" \
               -var "github_owner=${{ github.repository_owner }}" \
               -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
               -var "github_repository=${{ github.event.repository.name }}"
        env:
          ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        working-directory: ./terraform
        run: terraform destroy -auto-approve \
               -var "rg_name=${{ env.RG_NAME }}" \
               -var "location=${{ env.LOCATION }}" \
               -var "acr_suffix=${{ env.ACR_SUFFIX }}" \
               -var "image_name=${{ env.IMAGE_NAME }}" \
               -var "github_owner=${{ github.repository_owner }}" \
               -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
               -var "github_repository=${{ github.event.repository.name }}"
        env:
          ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  build-push:
    name: Build & Push Docker Image
    needs: terraform
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username:     ${{ secrets.ACR_USERNAME }}
          password:     ${{ secrets.ACR_PASSWORD }}

      - name: Build & Push Image
        run: |
          docker build \
            -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest \
            ./app
          docker push \
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
